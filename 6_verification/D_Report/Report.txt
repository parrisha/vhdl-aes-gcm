ECE 545 - Project
Aaron Joe Parrish

Verification Report

My first testbench is "ghash_datapath_tb.vhd".  I decided to verify the ghash datapath first because I was struggling
 with the GF^128 multiply and wanted to isolate and verify that functionality.  This testbench uses the "ghash_datapath_test_vector1.txt"
 test vector file.  The file was generated by "ghash.py".  The file is arranged as follows:

128-bit H value
128 128-bit X values (1 per line)
128-bit Y value (final output of GHASH)

The second testbench is "aessim_gcm_datapath_tb.vhd".  This testbench tests my datapath with AES stubbed out which I think is a critical
 piece towards completing the final design.  The testbench emulates the signals that will be sent from the controller,
 so it is also helping me verify my rough concept of how the controller will work.  The testbench uses the "aesgcm_datapath_test_vector1.txt"
 test vector file.  The file was generated by "aesgcm_datapath.py".  The file is arranged as follows:

K "128-bit key value"
I "96-bit IV value"
A "Number of AAD words"
128-bit value for each AAD word (1 per line)
P "Number of P words"
128-bit value for each P word (1 per line)
T "96-bit expected tag value"


The third testbench is "aes_gcm_datapath_tb.vhd".  This is essentially a copy of the testbench above but linking against my actual implementation
 of AES.  First I used this testbench to verify AES Keygen (from AES Keygen) with test vectors from FIPS-197 key expansion example.
 Second, I used this testbench to verify the AES round and AES cipher operation with test vectors generated from:
 "http://seit.unsw.adfa.edu.au/staff/sites/lpb/src/AEScalc/AEScalc.html" and from FIPS-197.  Third, I used this testbench to test the entire datapath
 with test vectors taken from the CryptoPP test file.  I've copied that file "gcm.txt" to the test vectors folder.


The fourth testbench is "aes_gcm_top_tb.vhd".  This testbench implements the controller and datapath together.  It accepts input according to
 the Cipher Interface document.  I hand generated one test vector for this testbench, "aesgcm_test_vector1.txt".  The test vector data is taken
 from the CyrptoPP test vectors file.


The fifth testbench is "ghash_datapath_tb2.vhd".  After my first build with a 128x128 Single-cycle GHASH multiply failed to build,
 I rewrote GHASH with a 128x32 4-cycle multiply.  I wanted to confirm that both GHASH implementations produce the same results, so
 I wrote a test bench that instantiates both, "ghash_datapath" and "ghash_datapath2".  In the wave window, I compared the outputs.



The highest level entity I tested was the entire AES_GCM core and it was verified to operate correctly in the fourth testbench.